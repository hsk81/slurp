// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: query.sql

package db

import (
	"context"
)

const createBlock = `-- name: CreateBlock :one
INSERT INTO blocks_p (
  height, id, ts, bytes
) VALUES (
  ?, ?, ?, ?
)
RETURNING height, id, ts, bytes
`

type CreateBlockParams struct {
	Height int64
	ID     string
	Ts     int64
	Bytes  []byte
}

func (q *Queries) CreateBlock(ctx context.Context, arg CreateBlockParams) (BlocksP, error) {
	row := q.db.QueryRowContext(ctx, createBlock,
		arg.Height,
		arg.ID,
		arg.Ts,
		arg.Bytes,
	)
	var i BlocksP
	err := row.Scan(
		&i.Height,
		&i.ID,
		&i.Ts,
		&i.Bytes,
	)
	return i, err
}

const getBlock = `-- name: GetBlock :one
SELECT height, id, ts, bytes FROM blocks_p
WHERE height = ? LIMIT 1
`

func (q *Queries) GetBlock(ctx context.Context, height int64) (BlocksP, error) {
	row := q.db.QueryRowContext(ctx, getBlock, height)
	var i BlocksP
	err := row.Scan(
		&i.Height,
		&i.ID,
		&i.Ts,
		&i.Bytes,
	)
	return i, err
}

const listBlocks = `-- name: ListBlocks :many
SELECT height, id, ts, bytes FROM blocks_p
`

func (q *Queries) ListBlocks(ctx context.Context) ([]BlocksP, error) {
	rows, err := q.db.QueryContext(ctx, listBlocks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BlocksP
	for rows.Next() {
		var i BlocksP
		if err := rows.Scan(
			&i.Height,
			&i.ID,
			&i.Ts,
			&i.Bytes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
